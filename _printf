#include <stdarg.h>  // For handling variable arguments
#include <unistd.h>  // For write()

**/
* _printf - Produces output according to a format.
* @format: The format string containing directives (%c, %s, %%).
* Return: The number of characters printed (excluding the null byte).
*/
int _printf(const char *format, ...)
{
va_list args;
int count = 0;
const char *ptr;

if (!format)
return (-1);

va_start(args, format);  // Initialize the argument list

for (ptr = format; *ptr; ptr++)
{
if (*ptr == '%')  // Check for '%' symbol
{
ptr++;
if (*ptr == '\0')
return (-1);  // Invalid format (trailing '%')
else if (*ptr == 'c')  // Handle %c
{
char ch = va_arg(args, int);
count += write(1, &ch, 1);
}
else if (*ptr == 's')  // Handle %s
{
char *str = va_arg(args, char *);
if (!str)
str = "(null)";
while (*str)
count += write(1, str++, 1);
}
else if (*ptr == '%')  // Handle %%
{
count += write(1, "%", 1);
}
else  // Invalid specifier
return (-1);
}
else  // Handle regular characters
{
count += write(1, ptr, 1);
}
}

va_end(args);  // Clean up argument list
return (count);
}

